use college;
-- Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    DOB DATE,
    Balance DECIMAL(10, 2),
    LastModified DATE,
    InterestRate DECIMAL(5, 2),
    IsVIP VARCHAR(5)
);

-- Accounts Table
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY,
    CustomerID INT,
    AccountType VARCHAR(20),
    Balance DECIMAL(10, 2),
    LastModified DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Transactions Table
CREATE TABLE Transactions (
    TransactionID INT PRIMARY KEY,
    AccountID INT,
    TransactionDate DATE,
    Amount DECIMAL(10, 2),
    TransactionType VARCHAR(10),
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);

-- Loans Table
CREATE TABLE Loans (
    LoanID INT PRIMARY KEY,
    CustomerID INT,
    LoanAmount DECIMAL(10, 2),
    InterestRate DECIMAL(5, 2),
    StartDate DATE,
    EndDate DATE,
    DueDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Employees Table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(100),
    Position VARCHAR(50),
    Salary DECIMAL(10, 2),
    Department VARCHAR(50),
    HireDate DATE
);

-- Data insertion
INSERT INTO Customers VALUES (1, 'John Doe', '1985-05-15', 1000, CURDATE(), 6, 'FALSE');
INSERT INTO Customers VALUES (2, 'Jane Smith', '1950-07-20', 15000, CURDATE(), 5, 'FALSE');

INSERT INTO Accounts VALUES (1, 1, 'Savings', 1000, CURDATE());
INSERT INTO Accounts VALUES (2, 2, 'Checking', 1500, CURDATE());

INSERT INTO Transactions VALUES (1, 1, CURDATE(), 200, 'Deposit');
INSERT INTO Transactions VALUES (2, 2, CURDATE(), 300, 'Withdrawal');

INSERT INTO Loans VALUES (
  1, 1, 5000, 5,
  CURDATE(),
  DATE_ADD(CURDATE(), INTERVAL 60 MONTH),
  DATE_ADD(CURDATE(), INTERVAL 1 MONTH)
);

INSERT INTO Employees VALUES (1, 'Alice Johnson', 'Manager', 70000, 'HR', '2015-06-15');
INSERT INTO Employees VALUES (2, 'Bob Brown', 'Developer', 60000, 'IT', '2017-03-20');

DELIMITER //

CREATE PROCEDURE ProcessMonthlyInterest()
BEGIN
  UPDATE Accounts
  SET Balance = Balance + (Balance * 0.01)
  WHERE AccountType = 'Savings';
END;
//

DELIMITER ;


DELIMITER //

CREATE PROCEDURE TransferFunds(
  IN from_account INT,
  IN to_account INT,
  IN amount DECIMAL(10,2)
)
BEGIN
  DECLARE source_balance DECIMAL(10,2);

  -- Check balance
  SELECT Balance INTO source_balance
  FROM Accounts
  WHERE AccountID = from_account;

  IF source_balance < amount THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Insufficient balance in source account.';
  END IF;

  -- Deduct from source
  UPDATE Accounts
  SET Balance = Balance - amount
  WHERE AccountID = from_account;

  -- Add to target
  UPDATE Accounts
  SET Balance = Balance + amount
  WHERE AccountID = to_account;
END;
//

DELIMITER ;

CALL ProcessMonthlyInterest();
SELECT * FROM Accounts;



